<?xml version="1.0"?>
<launch>
  <!-- Usage:

    planning_and_execution.launch sim:=<true|false> robot_ip:=<value> controller:=<fs100|dx100>  

  -->
  <!-- The planning and execution components of MoveIt! configured to run -->
  <!-- using the ROS-Industrial interface. -->
 
  <!-- Non-standard joint names:
       - Create a file [robot_moveit_config]/config/joint_names.yaml
           controller_joint_names: [joint_1, joint_2, ... joint_N] 
       - Update with joint names for your robot (in order expected by rbt controller)
       - and uncomment the following line: -->
  <rosparam command="load" file="$(find euler_support)/config/joint_names_mh5lf_euler.yaml"/>
 
  <!-- the "sim" argument controls whether we connect to a Simulated or Real robot -->
  <!--  - if sim=false, a robot_ip and controller(fs100|dx100) arguments is required -->
  <arg name="sim" default="true" />
  <arg name="robot_ip" unless="$(arg sim)" />
  <arg name="controller" unless="$(arg sim)" default="fs100"/>
  <arg name="rviz" default="true"/>
 
  <!-- load the robot_description parameter before launching ROS-I nodes -->
  <include file="$(find euler_moveit_config)/launch/planning_context.launch" >
    <arg name="load_robot_description" value="true" />
  </include>

  <!-- run the robot simulator and action interface nodes -->
  <group if="$(arg sim)">
    <include file="$(find industrial_robot_simulator)/launch/robot_interface_simulator.launch" />
  </group>

  <!-- run the "real robot" interface nodes -->
  <!--   - this typically includes: robot_state, motion_interface, and joint_trajectory_action nodes -->
  <!--   - replace these calls with appropriate robot-specific calls or launch files -->
  <group unless="$(arg sim)">
    <remap from="joint_states" to="robot_joint_states"/>
    <include file="$(find motoman_driver)/launch/robot_interface_streaming_$(arg controller).launch">
      <arg name="robot_ip" value="$(arg robot_ip)" />
    </include>
  </group>

  <!-- publish the robot state (tf transforms) -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
    <rosparam>
      source_list: [/mutable_joint_states, /robot_joint_states]
    </rosparam>
  </node>
  <node  name="mutable_joint_state_publisher" pkg="industrial_extrinsic_cal" type="mutable_joint_state_publisher" >
    <param name="mutable_joint_state_yaml_file" value="$(find euler_support)/config/euler_mutable_joint_states.yaml" />
  </node>

  <include file="$(find euler_moveit_config)/launch/move_group.launch">
    <arg name="publish_monitored_planning_scene" value="true" />
  </include>

  <include if="$(arg rviz)" file="$(find euler_moveit_config)/launch/moveit_rviz.launch">
    <arg name="config" value="true"/>
  </include>
  
</launch>


